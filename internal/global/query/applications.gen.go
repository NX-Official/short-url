// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"short-url/internal/model"
)

func newApplication(db *gorm.DB, opts ...gen.DOOption) application {
	_application := application{}

	_application.applicationDo.UseDB(db, opts...)
	_application.applicationDo.UseModel(&model.Application{})

	tableName := _application.applicationDo.TableName()
	_application.ALL = field.NewAsterisk(tableName)
	_application.ID = field.NewUint(tableName, "id")
	_application.CreatedAt = field.NewTime(tableName, "created_at")
	_application.UpdatedAt = field.NewTime(tableName, "updated_at")
	_application.DeletedAt = field.NewField(tableName, "deleted_at")
	_application.JobID = field.NewUint(tableName, "job_id")
	_application.UserID = field.NewUint(tableName, "user_id")
	_application.ResumeURL = field.NewString(tableName, "resume_url")
	_application.Status = field.NewUint(tableName, "status")
	_application.Interview = applicationHasOneInterview{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Interview", "model.Interview"),
	}

	_application.fillFieldMap()

	return _application
}

type application struct {
	applicationDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	JobID     field.Uint
	UserID    field.Uint
	ResumeURL field.String
	Status    field.Uint
	Interview applicationHasOneInterview

	fieldMap map[string]field.Expr
}

func (a application) Table(newTableName string) *application {
	a.applicationDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a application) As(alias string) *application {
	a.applicationDo.DO = *(a.applicationDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *application) updateTableName(table string) *application {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewUint(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.JobID = field.NewUint(table, "job_id")
	a.UserID = field.NewUint(table, "user_id")
	a.ResumeURL = field.NewString(table, "resume_url")
	a.Status = field.NewUint(table, "status")

	a.fillFieldMap()

	return a
}

func (a *application) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *application) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["job_id"] = a.JobID
	a.fieldMap["user_id"] = a.UserID
	a.fieldMap["resume_url"] = a.ResumeURL
	a.fieldMap["status"] = a.Status

}

func (a application) clone(db *gorm.DB) application {
	a.applicationDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a application) replaceDB(db *gorm.DB) application {
	a.applicationDo.ReplaceDB(db)
	return a
}

type applicationHasOneInterview struct {
	db *gorm.DB

	field.RelationField
}

func (a applicationHasOneInterview) Where(conds ...field.Expr) *applicationHasOneInterview {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a applicationHasOneInterview) WithContext(ctx context.Context) *applicationHasOneInterview {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a applicationHasOneInterview) Session(session *gorm.Session) *applicationHasOneInterview {
	a.db = a.db.Session(session)
	return &a
}

func (a applicationHasOneInterview) Model(m *model.Application) *applicationHasOneInterviewTx {
	return &applicationHasOneInterviewTx{a.db.Model(m).Association(a.Name())}
}

type applicationHasOneInterviewTx struct{ tx *gorm.Association }

func (a applicationHasOneInterviewTx) Find() (result *model.Interview, err error) {
	return result, a.tx.Find(&result)
}

func (a applicationHasOneInterviewTx) Append(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a applicationHasOneInterviewTx) Replace(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a applicationHasOneInterviewTx) Delete(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a applicationHasOneInterviewTx) Clear() error {
	return a.tx.Clear()
}

func (a applicationHasOneInterviewTx) Count() int64 {
	return a.tx.Count()
}

type applicationDo struct{ gen.DO }

func (a applicationDo) Debug() *applicationDo {
	return a.withDO(a.DO.Debug())
}

func (a applicationDo) WithContext(ctx context.Context) *applicationDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a applicationDo) ReadDB() *applicationDo {
	return a.Clauses(dbresolver.Read)
}

func (a applicationDo) WriteDB() *applicationDo {
	return a.Clauses(dbresolver.Write)
}

func (a applicationDo) Session(config *gorm.Session) *applicationDo {
	return a.withDO(a.DO.Session(config))
}

func (a applicationDo) Clauses(conds ...clause.Expression) *applicationDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a applicationDo) Returning(value interface{}, columns ...string) *applicationDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a applicationDo) Not(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a applicationDo) Or(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a applicationDo) Select(conds ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a applicationDo) Where(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a applicationDo) Order(conds ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a applicationDo) Distinct(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a applicationDo) Omit(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a applicationDo) Join(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a applicationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a applicationDo) RightJoin(table schema.Tabler, on ...field.Expr) *applicationDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a applicationDo) Group(cols ...field.Expr) *applicationDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a applicationDo) Having(conds ...gen.Condition) *applicationDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a applicationDo) Limit(limit int) *applicationDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a applicationDo) Offset(offset int) *applicationDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a applicationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *applicationDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a applicationDo) Unscoped() *applicationDo {
	return a.withDO(a.DO.Unscoped())
}

func (a applicationDo) Create(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a applicationDo) CreateInBatches(values []*model.Application, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a applicationDo) Save(values ...*model.Application) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a applicationDo) First() (*model.Application, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Take() (*model.Application, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Last() (*model.Application, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) Find() ([]*model.Application, error) {
	result, err := a.DO.Find()
	return result.([]*model.Application), err
}

func (a applicationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Application, err error) {
	buf := make([]*model.Application, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a applicationDo) FindInBatches(result *[]*model.Application, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a applicationDo) Attrs(attrs ...field.AssignExpr) *applicationDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a applicationDo) Assign(attrs ...field.AssignExpr) *applicationDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a applicationDo) Joins(fields ...field.RelationField) *applicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a applicationDo) Preload(fields ...field.RelationField) *applicationDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a applicationDo) FirstOrInit() (*model.Application, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FirstOrCreate() (*model.Application, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Application), nil
	}
}

func (a applicationDo) FindByPage(offset int, limit int) (result []*model.Application, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a applicationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a applicationDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a applicationDo) Delete(models ...*model.Application) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *applicationDo) withDO(do gen.Dao) *applicationDo {
	a.DO = *do.(*gen.DO)
	return a
}
