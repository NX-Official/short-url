// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"short-url/internal/model"
)

func newSlot(db *gorm.DB, opts ...gen.DOOption) slot {
	_slot := slot{}

	_slot.slotDo.UseDB(db, opts...)
	_slot.slotDo.UseModel(&model.Slot{})

	tableName := _slot.slotDo.TableName()
	_slot.ALL = field.NewAsterisk(tableName)
	_slot.ID = field.NewUint(tableName, "id")
	_slot.CreatedAt = field.NewTime(tableName, "created_at")
	_slot.UpdatedAt = field.NewTime(tableName, "updated_at")
	_slot.DeletedAt = field.NewField(tableName, "deleted_at")
	_slot.StartAt = field.NewTime(tableName, "start_at")
	_slot.EndAt = field.NewTime(tableName, "end_at")
	_slot.Address = field.NewString(tableName, "address")
	_slot.Capacity = field.NewInt(tableName, "capacity")
	_slot.Occupied = field.NewInt(tableName, "occupied")
	_slot.Interviews = slotHasManyInterviews{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Interviews", "model.Interview"),
	}

	_slot.Jobs = slotManyToManyJobs{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Jobs", "model.Job"),
		Applications: struct {
			field.RelationField
			Interview struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Jobs.Applications", "model.Application"),
			Interview: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Jobs.Applications.Interview", "model.Interview"),
			},
		},
		Slots: struct {
			field.RelationField
			Interviews struct {
				field.RelationField
			}
			Jobs struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Jobs.Slots", "model.Slot"),
			Interviews: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Jobs.Slots.Interviews", "model.Interview"),
			},
			Jobs: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Jobs.Slots.Jobs", "model.Job"),
			},
		},
	}

	_slot.fillFieldMap()

	return _slot
}

type slot struct {
	slotDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	StartAt    field.Time
	EndAt      field.Time
	Address    field.String
	Capacity   field.Int
	Occupied   field.Int
	Interviews slotHasManyInterviews

	Jobs slotManyToManyJobs

	fieldMap map[string]field.Expr
}

func (s slot) Table(newTableName string) *slot {
	s.slotDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s slot) As(alias string) *slot {
	s.slotDo.DO = *(s.slotDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *slot) updateTableName(table string) *slot {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.StartAt = field.NewTime(table, "start_at")
	s.EndAt = field.NewTime(table, "end_at")
	s.Address = field.NewString(table, "address")
	s.Capacity = field.NewInt(table, "capacity")
	s.Occupied = field.NewInt(table, "occupied")

	s.fillFieldMap()

	return s
}

func (s *slot) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *slot) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["start_at"] = s.StartAt
	s.fieldMap["end_at"] = s.EndAt
	s.fieldMap["address"] = s.Address
	s.fieldMap["capacity"] = s.Capacity
	s.fieldMap["occupied"] = s.Occupied

}

func (s slot) clone(db *gorm.DB) slot {
	s.slotDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s slot) replaceDB(db *gorm.DB) slot {
	s.slotDo.ReplaceDB(db)
	return s
}

type slotHasManyInterviews struct {
	db *gorm.DB

	field.RelationField
}

func (a slotHasManyInterviews) Where(conds ...field.Expr) *slotHasManyInterviews {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slotHasManyInterviews) WithContext(ctx context.Context) *slotHasManyInterviews {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slotHasManyInterviews) Session(session *gorm.Session) *slotHasManyInterviews {
	a.db = a.db.Session(session)
	return &a
}

func (a slotHasManyInterviews) Model(m *model.Slot) *slotHasManyInterviewsTx {
	return &slotHasManyInterviewsTx{a.db.Model(m).Association(a.Name())}
}

type slotHasManyInterviewsTx struct{ tx *gorm.Association }

func (a slotHasManyInterviewsTx) Find() (result []*model.Interview, err error) {
	return result, a.tx.Find(&result)
}

func (a slotHasManyInterviewsTx) Append(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slotHasManyInterviewsTx) Replace(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slotHasManyInterviewsTx) Delete(values ...*model.Interview) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slotHasManyInterviewsTx) Clear() error {
	return a.tx.Clear()
}

func (a slotHasManyInterviewsTx) Count() int64 {
	return a.tx.Count()
}

type slotManyToManyJobs struct {
	db *gorm.DB

	field.RelationField

	Applications struct {
		field.RelationField
		Interview struct {
			field.RelationField
		}
	}
	Slots struct {
		field.RelationField
		Interviews struct {
			field.RelationField
		}
		Jobs struct {
			field.RelationField
		}
	}
}

func (a slotManyToManyJobs) Where(conds ...field.Expr) *slotManyToManyJobs {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a slotManyToManyJobs) WithContext(ctx context.Context) *slotManyToManyJobs {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a slotManyToManyJobs) Session(session *gorm.Session) *slotManyToManyJobs {
	a.db = a.db.Session(session)
	return &a
}

func (a slotManyToManyJobs) Model(m *model.Slot) *slotManyToManyJobsTx {
	return &slotManyToManyJobsTx{a.db.Model(m).Association(a.Name())}
}

type slotManyToManyJobsTx struct{ tx *gorm.Association }

func (a slotManyToManyJobsTx) Find() (result []*model.Job, err error) {
	return result, a.tx.Find(&result)
}

func (a slotManyToManyJobsTx) Append(values ...*model.Job) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a slotManyToManyJobsTx) Replace(values ...*model.Job) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a slotManyToManyJobsTx) Delete(values ...*model.Job) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a slotManyToManyJobsTx) Clear() error {
	return a.tx.Clear()
}

func (a slotManyToManyJobsTx) Count() int64 {
	return a.tx.Count()
}

type slotDo struct{ gen.DO }

func (s slotDo) Debug() *slotDo {
	return s.withDO(s.DO.Debug())
}

func (s slotDo) WithContext(ctx context.Context) *slotDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s slotDo) ReadDB() *slotDo {
	return s.Clauses(dbresolver.Read)
}

func (s slotDo) WriteDB() *slotDo {
	return s.Clauses(dbresolver.Write)
}

func (s slotDo) Session(config *gorm.Session) *slotDo {
	return s.withDO(s.DO.Session(config))
}

func (s slotDo) Clauses(conds ...clause.Expression) *slotDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s slotDo) Returning(value interface{}, columns ...string) *slotDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s slotDo) Not(conds ...gen.Condition) *slotDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s slotDo) Or(conds ...gen.Condition) *slotDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s slotDo) Select(conds ...field.Expr) *slotDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s slotDo) Where(conds ...gen.Condition) *slotDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s slotDo) Order(conds ...field.Expr) *slotDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s slotDo) Distinct(cols ...field.Expr) *slotDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s slotDo) Omit(cols ...field.Expr) *slotDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s slotDo) Join(table schema.Tabler, on ...field.Expr) *slotDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s slotDo) LeftJoin(table schema.Tabler, on ...field.Expr) *slotDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s slotDo) RightJoin(table schema.Tabler, on ...field.Expr) *slotDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s slotDo) Group(cols ...field.Expr) *slotDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s slotDo) Having(conds ...gen.Condition) *slotDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s slotDo) Limit(limit int) *slotDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s slotDo) Offset(offset int) *slotDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s slotDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *slotDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s slotDo) Unscoped() *slotDo {
	return s.withDO(s.DO.Unscoped())
}

func (s slotDo) Create(values ...*model.Slot) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s slotDo) CreateInBatches(values []*model.Slot, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s slotDo) Save(values ...*model.Slot) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s slotDo) First() (*model.Slot, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Slot), nil
	}
}

func (s slotDo) Take() (*model.Slot, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Slot), nil
	}
}

func (s slotDo) Last() (*model.Slot, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Slot), nil
	}
}

func (s slotDo) Find() ([]*model.Slot, error) {
	result, err := s.DO.Find()
	return result.([]*model.Slot), err
}

func (s slotDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Slot, err error) {
	buf := make([]*model.Slot, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s slotDo) FindInBatches(result *[]*model.Slot, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s slotDo) Attrs(attrs ...field.AssignExpr) *slotDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s slotDo) Assign(attrs ...field.AssignExpr) *slotDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s slotDo) Joins(fields ...field.RelationField) *slotDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s slotDo) Preload(fields ...field.RelationField) *slotDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s slotDo) FirstOrInit() (*model.Slot, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Slot), nil
	}
}

func (s slotDo) FirstOrCreate() (*model.Slot, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Slot), nil
	}
}

func (s slotDo) FindByPage(offset int, limit int) (result []*model.Slot, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s slotDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s slotDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s slotDo) Delete(models ...*model.Slot) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *slotDo) withDO(do gen.Dao) *slotDo {
	s.DO = *do.(*gen.DO)
	return s
}
